repositories {
    maven { url 'https://maven.google.com' }
    maven { url "https://plugins.gradle.org/m2/" }
}

buildscript {
  repositories {
    maven { url 'https://maven.google.com' }
    maven { url "https://plugins.gradle.org/m2/" }
  }
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    defaultConfig {
        applicationId "io.grpc.helloworldexample"
        minSdkVersion 7
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    flavorDimensions 'abi', 'version'

    productFlavors {
        freeapp {
          dimension 'version'
        }
        retailapp {
          dimension 'version'
        }
        x86 {
          dimension 'abi'
        }
        arm {
          dimension 'abi'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'io/grpc/testing/integration/empty.proto'
        exclude 'io/grpc/testing/integration/test.proto'
        exclude 'io/grpc/testing/integration/messages.proto'
        exclude 'tmp/stuff.proto'
    }

    // https://github.com/square/okio/issues/58
    lintOptions {
        warning 'InvalidPackage'
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "1g"
        threadCount 1 // reduce predex thread count to limit memory usage
    }
}

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.0.0'
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
    }
    javalite {
      artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
    }
  }
  generateProtoTasks {
    all {
      plugins {
        javalite { }
      }
    }
    ofNonTest {
      plugins {
        grpc {
          // Options added to --grpc_out
          option 'lite'
        }
      }
    }
  }
}

dependencies {
  implementation 'com.android.support:appcompat-v7:23.4.0'
  implementation 'com.squareup.okhttp:okhttp:2.7.5'
  implementation 'javax.annotation:javax.annotation-api:1.2'
  implementation 'com.google.protobuf:protobuf-lite:3.0.0'
  implementation 'io.grpc:grpc-core:1.0.0-pre2'
  implementation 'io.grpc:grpc-stub:1.0.0-pre2'
  implementation 'io.grpc:grpc-okhttp:1.0.0-pre2'
  implementation('io.grpc:grpc-protobuf-lite:1.0.0-pre2') {
    // Otherwise Android compile will complain "Multiple dex files define ..."
    exclude module: "protobuf-lite"
  }
  implementation(project(':testProjectLite')) {
    exclude module: "protobuf-lite"
  }
  protobuf files('lib/protos.jar')
  testImplementation 'junit:junit:4.12'
}

def assertJavaCompileHasProtoGeneratedDir(Object variant, Collection<String> codegenPlugins) {
  rootProject.assertJavaCompileHasProtoGeneratedDir(project, variant.name, variant.javaCompileProvider.get(), codegenPlugins)
}

afterEvaluate {
  // 'gradle test' will run the unit tests, which is still experimental in
  // Android plugin, and would do nothing with our setup. We make 'test' to
  // trigger the "androidTest" Java compile tasks.
  android.testVariants.each { testVariant ->
    test.dependsOn testVariant.javaCompileProvider
  }

  test.doLast {
    assert [
        'armFreeappDebugAndroidTest',
        'armFreeappDebugUnitTest',
        'armFreeappReleaseUnitTest',
        'armFreeappDebug',
        'armFreeappRelease',
        'armRetailappDebugAndroidTest',
        'armRetailappDebugUnitTest',
        'armRetailappReleaseUnitTest',
        'armRetailappDebug',
        'armRetailappRelease',
        'x86FreeappDebugAndroidTest',
        'x86FreeappDebugUnitTest',
        'x86FreeappReleaseUnitTest',
        'x86FreeappDebug',
        'x86FreeappRelease',
        'x86RetailappDebugAndroidTest',
        'x86RetailappDebugUnitTest',
        'x86RetailappReleaseUnitTest',
        'x86RetailappDebug',
        'x86RetailappRelease',
    ] as Set == protobuf.generateProtoTasks.all().collect({ it.name }) as Set

    assert [
        'armFreeappDebugAndroidTest',
        'armFreeappDebugUnitTest',
        'armFreeappReleaseUnitTest',
        'armRetailappDebugAndroidTest',
        'armRetailappDebugUnitTest',
        'armRetailappReleaseUnitTest',
        'x86FreeappDebugAndroidTest',
        'x86FreeappDebugUnitTest',
        'x86FreeappReleaseUnitTest',
        'x86RetailappDebugAndroidTest',
        'x86RetailappDebugUnitTest',
        'x86RetailappReleaseUnitTest',
    ] as Set == protobuf.generateProtoTasks.ofTest().collect({ it.name }) as Set

    assert [
        'armFreeappDebug',
        'armFreeappRelease',
        'armRetailappDebug',
        'armRetailappRelease',
        'x86FreeappDebug',
        'x86FreeappRelease',
        'x86RetailappDebug',
        'x86RetailappRelease',
    ] as Set == protobuf.generateProtoTasks.ofNonTest().collect({ it.name }) as Set

    assert [
        'armFreeappDebugAndroidTest',
        'armFreeappDebugUnitTest',
        'armFreeappReleaseUnitTest',
        'armFreeappDebug',
        'armFreeappRelease',
        'x86FreeappDebugAndroidTest',
        'x86FreeappDebugUnitTest',
        'x86FreeappReleaseUnitTest',
        'x86FreeappDebug',
        'x86FreeappRelease',
    ] as Set == protobuf.generateProtoTasks.ofFlavor('freeapp').collect({ it.name }) as Set

    assert [
        'armRetailappDebugAndroidTest',
        'armRetailappDebugUnitTest',
        'armRetailappReleaseUnitTest',
        'armRetailappDebug',
        'armRetailappRelease',
        'x86RetailappDebugAndroidTest',
        'x86RetailappDebugUnitTest',
        'x86RetailappReleaseUnitTest',
        'x86RetailappDebug',
        'x86RetailappRelease',
    ] as Set == protobuf.generateProtoTasks.ofFlavor('retailapp').collect({ it.name }) as Set

    assert [
        'x86FreeappDebugAndroidTest',
        'x86FreeappDebugUnitTest',
        'x86FreeappReleaseUnitTest',
        'x86FreeappDebug',
        'x86FreeappRelease',
        'x86RetailappDebugAndroidTest',
        'x86RetailappDebugUnitTest',
        'x86RetailappReleaseUnitTest',
        'x86RetailappDebug',
        'x86RetailappRelease',
    ] as Set == protobuf.generateProtoTasks.ofFlavor('x86').collect({ it.name }) as Set

    assert [
        'armFreeappDebugAndroidTest',
        'armFreeappDebugUnitTest',
        'armFreeappReleaseUnitTest',
        'armFreeappDebug',
        'armFreeappRelease',
        'armRetailappDebugAndroidTest',
        'armRetailappDebugUnitTest',
        'armRetailappReleaseUnitTest',
        'armRetailappDebug',
        'armRetailappRelease',
    ] as Set == protobuf.generateProtoTasks.ofFlavor('arm').collect({ it.name }) as Set

    assert [
        'armFreeappDebugAndroidTest',
        'armFreeappDebugUnitTest',
        'armFreeappDebug',
        'armRetailappDebugAndroidTest',
        'armRetailappDebugUnitTest',
        'armRetailappDebug',
        'x86FreeappDebugAndroidTest',
        'x86FreeappDebugUnitTest',
        'x86FreeappDebug',
        'x86RetailappDebugAndroidTest',
        'x86RetailappDebugUnitTest',
        'x86RetailappDebug'
    ] as Set == protobuf.generateProtoTasks.ofBuildType('debug').collect({ it.name }) as Set

    assert [
        'armFreeappRelease',
        'armFreeappReleaseUnitTest',
        'armRetailappRelease',
        'armRetailappReleaseUnitTest',
        'x86FreeappRelease',
        'x86FreeappReleaseUnitTest',
        'x86RetailappRelease',
        'x86RetailappReleaseUnitTest',
    ] as Set == protobuf.generateProtoTasks.ofBuildType('release').collect({ it.name }) as Set

    assert ['x86FreeappDebugAndroidTest'] as Set ==
            protobuf.generateProtoTasks.ofVariant('x86FreeappDebugAndroidTest').collect({ it.name }) as Set

    // "androidTest" sourceSet is not a flavor
    assert [] as Set == protobuf.generateProtoTasks.ofFlavor('androidTest').collect({ it.name }) as Set

    // "unitTest" sourceset is not a flavor
    assert [] as Set == protobuf.generateProtoTasks.ofFlavor('unitTest').collect({ it.name }) as Set

    android.applicationVariants.each { variant ->
      assertJavaCompileHasProtoGeneratedDir(variant, ['javalite', 'grpc'])
    }

    android.testVariants.each { variant ->
      assertJavaCompileHasProtoGeneratedDir(variant, ['javalite'])
    }
  }
}
