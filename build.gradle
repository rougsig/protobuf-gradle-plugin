plugins {
  id "idea"
  id "eclipse"

  id "maven-publish"
  id "signing"
  id "com.gradle.plugin-publish" version "1.0.0"

  id "codenarc"
  id "com.github.ben-manes.versions" version "0.42.0"

  id "groovy"
  id "org.gradle.kotlin.kotlin-dsl" version "2.3.3"
  id "org.jetbrains.kotlin.jvm" version "1.7.20"
}

println """\
Welcome to Gradle $gradle.gradleVersion - http://www.gradle.org
Gradle home is set to: $gradle.gradleHomeDir
Gradle user directory is set to: $gradle.gradleUserHomeDir

Base directory: $projectDir
Running script ${relativePath(buildFile)}
"""

group = 'com.google.protobuf'
version = '0.9.0-SNAPSHOT'
ext.isSnapshotVersion = version.endsWith("SNAPSHOT")

repositories {
  mavenCentral()
  gradlePluginPortal()
  google()
}

dependencies {
  compileOnly "com.android.tools.build:gradle:7.3.0"
  compileOnly gradleApi()

  implementation 'com.google.guava:guava:27.0.1-jre'
  implementation 'com.google.gradle:osdetector-gradle-plugin:1.7.0'

  testImplementation gradleTestKit()
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'commons-io:commons-io:2.11.0'
  testImplementation('org.spockframework:spock-core:2.2-groovy-3.0') {
    exclude group: 'org.codehaus.groovy'
  }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// Required in order to support building a mixed kotlin/groovy project. With out this,
// we would get a cyclic dependency error, since both compileKotlin and compileGroovy depend on compileJava.
// See https://github.com/gradle/gradle/pull/11513 and https://discuss.gradle.org/t/kotlin-groovy-and-java-compilation/14903/10
tasks.named('compileGroovy') {
  classpath = sourceSets.main.compileClasspath
}

tasks.named('compileKotlin') {
  compileKotlin.classpath += files(compileGroovy.destinationDirectory)
}

tasks.named("test") {
  testLogging {
    events = ["standard_out", "standard_error", "started", "passed", "failed", "skipped"]
  }

  inputs.files(
    fileTree("$projectDir/testProject"),
    fileTree("$projectDir/testProjectAndroid"),
    fileTree("$projectDir/testProjectAndroidBare"),
    fileTree("$projectDir/testProjectAndroidBase"),
    fileTree("$projectDir/testProjectAndroidDependentBase"),
    fileTree("$projectDir/testProjectAndroidKotlin"),
    fileTree("$projectDir/testProjectAndroidKotlinDsl"),
    fileTree("$projectDir/testProjectAndroidLibrary"),
    fileTree("$projectDir/testProjectBase"),
    fileTree("$projectDir/testProjectBuildTimeProto"),
    fileTree("$projectDir/testProjectCustomProtoDir"),
    fileTree("$projectDir/testProjectDependent"),
    fileTree("$projectDir/testProjectDependentApp"),
    fileTree("$projectDir/testProjectJavaAndKotlin"),
    fileTree("$projectDir/testProjectJavaLibrary"),
    fileTree("$projectDir/testProjectKotlin"),
    fileTree("$projectDir/testProjectKotlinDslBase"),
    fileTree("$projectDir/testProjectKotlinDslCopySpec"),
    fileTree("$projectDir/testProjectLite")
  )
}

codenarc {
  toolVersion = "1.4"

  // Normally html output is more user friendly,
  // but we want a console printable file for CI logs
  if (System.env.CI == 'true') reportFormat = 'text'
}

// region publishing
// region maven-publishing
TaskProvider sourcesJar = tasks.register("sourcesJar", Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
  dependsOn "classes"
}

TaskProvider groovydocJar = tasks.register("groovydocJar", Jar) {
  classifier = 'groovydoc'
  from groovydoc.destinationDir
  dependsOn "groovydoc"
}

TaskProvider javadocJar = tasks.register("javadocJar", Jar) {
  classifier = 'javadoc'
  from javadoc.destinationDir
  dependsOn "javadoc"
}

publishing {
  publications {
    pluginMaven(MavenPublication) {
      artifact sourcesJar
      artifact groovydocJar
      artifact javadocJar

      pom {
        name = project.name
        description = "Gradle build plugin to handle Protocol Buffers automated code generation and compilation"
        url = "https://github.com/google/protobuf-gradle-plugin"
        licenses {
          license {
            name = "BSD 3-Clause"
            url = "http://opensource.org/licenses/BSD-3-Clause"
          }
        }
        developers {
          developer {
            id = "zhangkun83"
            name = "Kun Zhang"
            email = "zhangkun@google.com"
          }
        }
        scm {
          connection = "scm:git:git://github.com/google/protobuf-gradle-plugin.git"
          developerConnection = "scm:git:git@github.com:google/protobuf-gradle-plugin.git"
          url = "https://github.com/google/protobuf-gradle-plugin"
        }
      }
    }
  }

  repositories {
    maven {
      String releaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      String snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
      url = isSnapshotVersion ? snapshotUrl : releaseUrl

      credentials {
        if (rootProject.hasProperty("ossrhUsername") && rootProject.hasProperty("ossrhPassword")) {
          username = rootProject.ossrhUsername
          password = rootProject.ossrhPassword
        }
      }
    }
  }
}
// endregion maven-publishing

signing {
  required { !isSnapshotVersion }
  sign publishing.publications.pluginMaven
}

// region gradle-publishing
gradlePlugin {
  plugins {
    protobufPlugin {
      id = 'com.google.protobuf'
      implementationClass = "com.google.protobuf.gradle.ProtobufPlugin"
      displayName = 'Protobuf Plugin for Gradle'
    }
  }
}

pluginBundle {
  website = 'https://github.com/google/protobuf-gradle-plugin'
  vcsUrl = 'https://github.com/google/protobuf-gradle-plugin'
  description = 'The Protobuf plugin provides protobuf compilation to your project.'
  tags = ['protobuf', 'protocol-buffers', 'protoc']
}
// endregion gradle-publishing
// endregion publications
