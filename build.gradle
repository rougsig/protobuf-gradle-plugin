plugins {
    id 'codenarc'
    id 'idea'
    id 'eclipse'
    id 'groovy'
    id 'maven'
    id 'maven-publish'
    id 'signing'

    id "com.github.ben-manes.versions" version "0.12.0"
    id "com.gradle.plugin-publish" version "0.11.0"
    id "org.gradle.kotlin.kotlin-dsl" version "1.4.9"
}

group = 'com.google.protobuf'
version = '0.10.0-SNAPSHOT'

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
    gradlePluginPortal()
    google()
}

configurations {
    // Test projects may have runtime dependencies such as the kotlin plugin
    testProjectRuntime
}

dependencies {
  compileOnly "com.android.tools.build:gradle:4.2.2"
  compileOnly "org.jetbrains.kotlin.android:org.jetbrains.kotlin.android.gradle.plugin:1.7.22"

  implementation 'com.google.gradle:osdetector-gradle-plugin:1.7.2'

  testImplementation 'junit:junit:4.12'
  testImplementation('org.spockframework:spock-core:1.0-groovy-2.4') {
    exclude module: 'groovy-all'
  }
  testImplementation 'commons-io:commons-io:2.5'
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.register('groovydocJar', Jar) {
    dependsOn groovydoc
    classifier = 'groovydoc'
    from groovydoc.destinationDir
}

codenarc {
    toolVersion = "1.4"
    if (System.env.CI == 'true') {
      // Normally html output is more user friendly,
      // but we want a console printable file for CI logs
      reportFormat = 'text'
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(GenerateModuleMetadata) {
  enabled = false
}

File testRepoUrl = layout.buildDirectory.dir('testRepo').get().asFile

publishing {
  publications {
    pluginMaven(MavenPublication) {
      artifact groovydocJar

      pom {
        name = project.name
        description = "Gradle build plugin to handle Protocol Buffers automated code generation and compilation"
        url = "https://github.com/google/protobuf-gradle-plugin"
        licenses {
          license {
            name = "BSD 3-Clause"
            url = "http://opensource.org/licenses/BSD-3-Clause"
          }
        }
        developers {
          developer {
            id = "zhangkun83"
            name = "Kun Zhang"
            email = "zhangkun@google.com"
          }
        }
        scm {
          connection = "scm:git:git://github.com/google/protobuf-gradle-plugin.git"
          developerConnection = "scm:git:git@github.com:google/protobuf-gradle-plugin.git"
          url = "https://github.com/google/protobuf-gradle-plugin"
        }
      }
    }
  }

  repositories {
    maven {
      url = testRepoUrl
      name = "test"
    }
    maven {
      String releaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      String snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
      url = version.endsWith('SNAPSHOT') ? snapshotUrl : releaseUrl

      credentials {
        if (rootProject.hasProperty("ossrhUsername") && rootProject.hasProperty("ossrhPassword")) {
          username = rootProject.ossrhUsername
          password = rootProject.ossrhPassword
        }
      }
    }
  }
}

// The Gradle plugin portal doesn't allow signature files.
if (!gradle.startParameter.taskNames.intersect(['publishPlugins'])) {
  signing {
       required { isReleaseVersion }
       sign publishing.publications.pluginMaven
  }
}

gradlePlugin {
  plugins {
    protobufPlugin {
      id = "com.google.protobuf"
      implementationClass = "com.google.protobuf.gradle.ProtobufPlugin"
      description = "The Protobuf plugin provides protobuf compilation to your project."
    }
  }
}

pluginBundle {
  website = 'https://github.com/google/protobuf-gradle-plugin'
  vcsUrl = 'https://github.com/google/protobuf-gradle-plugin'
  description = 'The Protobuf plugin provides protobuf compilation to your project.'

  plugins {
      protobufPlugin {
          id = 'com.google.protobuf'
          displayName = 'Protobuf Plugin for Gradle'
          tags = ['protobuf', 'protocol-buffers', 'protoc']
      }
  }
}

// Required in order to support building a mixed kotlin/groovy project. With out this,
// we would get a cyclic dependency error, since both compileKotlin and compileGroovy
// depend on compileJava.
// See https://github.com/gradle/gradle/pull/11513 and https://discuss.gradle.org/t/kotlin-groovy-and-java-compilation/14903/10
tasks.named('compileGroovy') {
    classpath = sourceSets.main.compileClasspath
}
tasks.named('compileKotlin') {
    compileKotlin.classpath += files(compileGroovy.destinationDirectory)
}

tasks.named('test') {
  inputs.files fileTree("$projectDir/testProject")
  inputs.files fileTree("$projectDir/testProjectAndroid")
  inputs.files fileTree("$projectDir/testProjectAndroidBare")
  inputs.files fileTree("$projectDir/testProjectAndroidBase")
  inputs.files fileTree("$projectDir/testProjectAndroidDependentBase")
  inputs.files fileTree("$projectDir/testProjectAndroidKotlin")
  inputs.files fileTree("$projectDir/testProjectAndroidKotlinDsl")
  inputs.files fileTree("$projectDir/testProjectAndroidLibrary")
  inputs.files fileTree("$projectDir/testProjectBase")
  inputs.files fileTree("$projectDir/testProjectBuildTimeProto")
  inputs.files fileTree("$projectDir/testProjectCustomProtoDir")
  inputs.files fileTree("$projectDir/testProjectDependent")
  inputs.files fileTree("$projectDir/testProjectDependentApp")
  inputs.files fileTree("$projectDir/testProjectJavaAndKotlin")
  inputs.files fileTree("$projectDir/testProjectJavaLibrary")
  inputs.files fileTree("$projectDir/testProjectKotlin")
  inputs.files fileTree("$projectDir/testProjectKotlinDslBase")
  inputs.files fileTree("$projectDir/testProjectKotlinDslCopySpec")
  inputs.files fileTree("$projectDir/testProjectLite")

  testLogging {
    events = ["standard_out", "standard_error", "started", "passed", "failed", "skipped"]
  }

  // Hack for gradle runner test classloader.
  //
  // GradleRunner.withPluginClasspath method loads a plugin under test to the classloader_1.
  // When the test project is executed, it will load plugins to a project classloader_2.
  // The classloader_1 doesn't known about classloader_2. When the plugin under test will use classes which
  // was loaded to project with the classloader_2, ClassNotFoundException will be thrown.
  //
  // To fix this problem, don't use the withPluginClasspath method.
  // Provide a plugin under test with the maven local repository.
  systemProperty("protobufPluginVersion", version)
  systemProperty("testRepoUrl", testRepoUrl.absolutePath)
  dependsOn(
    "publishProtobufPluginPluginMarkerMavenPublicationToTestRepository",
    "publishPluginMavenPublicationToTestRepository"
  )
}
